/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, PostApp, User } from "@prisma/client";

export class PostAppServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PostAppFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PostAppFindManyArgs>
  ): Promise<number> {
    return this.prisma.postApp.count(args);
  }

  async findMany<T extends Prisma.PostAppFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PostAppFindManyArgs>
  ): Promise<PostApp[]> {
    return this.prisma.postApp.findMany(args);
  }
  async findOne<T extends Prisma.PostAppFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PostAppFindUniqueArgs>
  ): Promise<PostApp | null> {
    return this.prisma.postApp.findUnique(args);
  }
  async create<T extends Prisma.PostAppCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PostAppCreateArgs>
  ): Promise<PostApp> {
    return this.prisma.postApp.create<T>(args);
  }
  async update<T extends Prisma.PostAppUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PostAppUpdateArgs>
  ): Promise<PostApp> {
    return this.prisma.postApp.update<T>(args);
  }
  async delete<T extends Prisma.PostAppDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PostAppDeleteArgs>
  ): Promise<PostApp> {
    return this.prisma.postApp.delete(args);
  }

  async findTags(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<User[]> {
    return this.prisma.postApp
      .findUnique({
        where: { id: parentId },
      })
      .tags(args);
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.postApp
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
